@inject Microsoft.AspNetCore.Identity.SignInManager<LondonTravelUser> SignInManager
@{
    ViewBag.MetaDescription = "Sign in to your London Travel account.";
    ViewBag.MetaRobots = "NOINDEX";
    ViewBag.Title = "Sign in";
}
<h2>@ViewBag.Title</h2>
@if (ViewBag.PermissionDenied == true)
{
    <div class="alert alert-warning" role="alert">
        <p>
            You did not grant permission for London Travel to access your email address when you signed in.
        </p>
        <p>
            An email address is required to set up an account when signing in with an external service.
        </p>
    </div>
}
else if (ViewBag.IsAlreadyRegistered == true)
{
    <div class="alert alert-warning" role="alert">
        <p>
            You have already created a London Travel account by signing in with a different
            external service to the one you just tried to sign in with.
        </p>
        <p>
            Sign in with one of the external service(s) you've already used to sign-in,
            then you'll be able to link other external services to your account
            from the <a asp-route="Manage" class="alert-link">account mangement</a>
            page after you've signed in.
        </p>
    </div>
}
<div class="row">
    <div class="col-md-4">
        <section>
            <h4>Choose an external service to sign in with</h4>
            <hr />
            <form asp-route="ExternalSignIn" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                <div>
                    <p>
                        @{
                            IDictionary<string, string> iconMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                            {
                                { "Facebook", "facebook" },
                                { "Google", "google" },
                                { "Microsoft", "windows" },
                                { "Twitter", "twitter" },
                            };
                        }
                        @foreach (var provider in SignInManager.GetExternalAuthenticationSchemes().OrderBy((p) => p.DisplayName).ThenBy((p) => p.AuthenticationScheme))
                        {
                            <button type="submit" class="btn btn-block btn-social btn-@provider.AuthenticationScheme.ToLowerInvariant()" name="provider" value="@provider.AuthenticationScheme" title="Sign in using your @provider.DisplayName account">
                                <i class="fa fa-@iconMap[provider.AuthenticationScheme]"></i> Sign in using your @provider.DisplayName account
                            </button>
                        }
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-8">
        <section>
            <h3>...or create a new account</h3>
            <p>If you do not already have a London Travel account, one will be created for you automatically once you've signed in.</p>
            <p>The London Travel account created will use with email address associated with the external service you sign in with.</p>
            <p>
                Accounts and their data are managed by this service in line with the
                <a asp-route="PrivacyPolicy" rel="noopener" title="View the London Travel Alexa skill's Privacy Policy">
                    Privacy Policy
                </a>
                and
                <a asp-route="TermsOfService" rel="noopener" title="View the London Travel Alexa skill's Terms of Service">
                    Terms of Service
                </a>.
            </p>
        </section>
    </div>
</div>
@section stylesBody {
    <link rel="stylesheet" href="~/lib/bootstrap-social/bootstrap-social.css" asp-append-version="true" async />
}
